#!/bin/sh

# uname
export UNAMEOS=`uname -o`
export UNAMEMACHINE=`uname -m`

# my machines
MYPC=0
MYLAPTOP=0
if [ $HOSTNAME == "JOJO-PC" ]; then
    MYPC=1
elif [ $HOSTNAME == "JOJO2-PC" ]; then
    MYPC=1
elif [ $HOSTNAME == "JOJO-LAPTOP" ]; then
    MYLAPTOP=1
fi

if [ $UNAMEOS == Msys ] ; then
    export UNAMEOS=MinGW
fi

if grep -qi microsoft /proc/version; then
    INSIDE_WSL=1
fi

EDITOR='emacs -nw -q -l $HOME/.emacs.d/min-settings.el'

add_path() # add only if missing
{
    if [[ ! $PATH == *"$1"* ]]; then
        if [ ! -z "$2" ] ; then
            if [ "$2" == "begin" ] || [ "$2" == "end" ] ; then
                position=$2
            else
                echo "add_path(): arg 2 must be begin or end but is " $2
                return
            fi
        else
            position="end"
        fi
        if [ $position == "end" ] ; then
            PATH+=":$1"
        else # $position == "begin"
            PATH="$1:""$PATH"
        fi
    fi
}

# add ~/local to path
if [ -d ~/.local/bin ]; then
    add_path "~/.local/bin" "begin"
fi
# add ~/local/$UNAMEOS
if [ -d ~/.local/$UNAMEOS ]; then
    add_path "~/.local/$UNAMEOS/bin" "begin"
fi

if [ $MYPC == 1 ] || [ $MYLAPTOP == 1 ]; then
    # env vars
    export DEV=$HOME/DLAM
    export DEVDATA='/c/Devel/Data'
    export DEVLIBS='/c/Devel/Libs/Win64'
    export BUILDLOGECLIPSE="C:\Devel\Workspace\.metadata\.plugins\org.eclipse.cdt.ui\DLAM.build.log"

    # path
    add_path "$DEV/Data/Scripts"
    add_path "$DEV/Data/Scripts/build"
    add_path "$DEV/Build"
    alias n='metaninja'
    alias nn='ninja'
fi

if [ $MYPC == 1 ] ; then
    # env vars
    export INCOMING=/c/Incoming
    export DEVSETUP=/d/Setup/Misc/DevelTools/PCdev

    # path

    # alias

    # fix needed for old msys only /c/Devel/Tools/Msys2-64
    # because it is not launched correctly throught msys2_shell.cmd
    # it does not have this in path:
    # add_path "/mingw64/bin"

    csconfig()
    {
        F1=/c/Games/Steam/steamapps/common/Counter-Strike*/game/csgo/cfg/autoexec.cfg
        F2=/c/Games/Steam/userdata/1*/730/local/cfg/cs2_user_keys_0_slot0.vcfg
        emacs -nw $F1 $F2
        cp -av $F1 $F2 ~/.counter_strike/
    }

    add_path /ucrt64/bin begin # for convert imagemagick
fi

if [ $MYLAPTOP == 1 ] ; then
    # env vars
    export INCOMING=/c/Incoming
fi

if [ $UNAMEOS == Msys ] || [ $UNAMEOS == MinGW ] ; then
    alias pkgsearch='pacman -Ss'
    alias pkgget='pacman -S'
    alias pkgremove='pacman -Rcns'
    alias pkginstalled='pacman -Q'
    alias pkgfiles='pacman -Ql'
    alias emacs='emacs -nw'
    export GITBRANCH="λ"
    # export EDITOR='vim  -c "startinsert"' # now emacs-nox works in MinGW
    export MSYS=winsymlinks:nativestrict
    export CMAKE_GENERATOR="Unix Makefiles"
    # if [ $MYPC == 1 ] || [ $MYLAPTOP == 1 ]; then
        # export PATH=/mingw64/bin:$PATH
        # export PATH=/c/Devel/Tools/TDM-GCC-64/bin:$PATH
        # export PATH=/c/Devel/Tools/W64DevKit-1.17.0/bin:$PATH

        # NO, we now prefer /mingw64/bin/g++ because it supports pre compiled headers
        # add_path "/c/Devel/Tools/W64DevKit-1.17.0/bin" "begin"
    # fi

    # GDB ...
    # in bash, we prefer msys/gdb because
    # it works better with cgdb: colors are working
    # in Eclipse, we prefer mingw64/gdb because it fails to launch msys/gdb
    # -> in bash, provide aliases for finding msys/gdb before mingw64/gdb which is first in path
    alias gdb='/usr/bin/gdb'
    alias cgdb='PATH=/usr/bin:$PATH cgdb'

    rgpipe() # translate path delimitor for unix use
    {
        rg  $* | sed 's+\\+/+g'
    }

    # emacs as a client from wsl daemon ...
    # starts very fast
    # but fails to be GIT_EDITOR
    # with this error:
    # File no longer exists: /c/Directory/C:/Directory/.git/COMMIT_EDITMSG
    # alias wstartemacsdaemon="wsl emacs --daemon"
    # alias wemacs="wsl emacsclient -t"

    clang-analyze-module()
    {
        module="$1"
        metagenerate.sh Analysis
        cd $DEV/.Build/Analysis
        nfile=analysemodule.ninja
        cat build.ninja | grep -vw ^build > $nfile
        out="$HOME/tmp/$module.analysis"
        rm -f $out/*html
        echo "build $out: analyze-html ../../src/$module.cpp" >> $nfile
        ninja -f $nfile -vn
        ninja -f $nfile --quiet
        cd "$OLDPWD"
        echo ""
        echo "Results in $out"
        ls $out/* > /dev/null 2>&1 && \
            start $(cygpath -m $out)
    }

elif [ $UNAMEOS == Cygwin ] ; then
    alias pkgsearch='apt-cyg listall'
    alias pkgget='apt-cyg install'
    alias pkgremove='apt-cyg remove'
    alias pkginstalled='apt-cyg list'
    alias pkgfiles='apt-cyg listfiles'
    alias packages='/z/Setup/Misc/DevelTools/cygwin-setup-$UNAMEMACHINE.exe'
    export CYGWIN=winsymlinks:nativestrict
elif [ $UNAMEOS == GNU/Linux ] ; then
    alias pkgsearch='apt-cache search --names-only'
    alias pkgget='sudo apt-get install'
    alias pkgremove='sudo apt-get remove'
    alias pkginstalled='dpkg -la'
    alias pkgfiles='dpkg -L'
    alias pkgautoremove='sudo apt-get autoremove'

    if [ ! -z $INSIDE_WSL ] ; then
        export GITBRANCH="λ"
    fi
fi

# how to GIF :
# mkdir -p indexed; j=1;for i in *jpg; do mv -v $i indexed/image$j.jpg; j=`expr $j + 1`; done
# cd indexed
# mkdir -p cropped; for i in *jpg; do convert -crop 753x753+627+259 $i cropped/$i; done
# filters="fps=30,scale=466:-1:flags=lanczos"
# palette=palette.png
# ffmpeg.exe -f image2 -i image%d.jpg -vf "$filters,palettegen=stats_mode=diff" -y $palette && ffmpeg.exe -f image2 -i image%d.jpg  -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -loop -1 -y zz-30fps-crop2-scale-two-thirds-stats-diff.gif

# how to TRANSCODE IPOD
# see https://devblogs.nvidia.com/nvidia-ffmpeg-transcoding-guide/
# ffmpeg.exe -vsync 0 -hwaccel cuvid -c:v h264_cuvid -i *S01E01*.mkv -c:a copy -c:v h264_nvenc -b:v 4M input.mp4
# maybe bitrates : 5M for 720p, 10M for 1080p

# how to TRANSCODE UPSCALE
# alias ffmpeg1440p='ffmpeg -i $1 -vf scale=2560x1440:flags=lanczos -c:v libx264 -preset slow -crf 21'
